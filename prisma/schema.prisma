// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  chats         Chat[]
  ragCollections RagCollection[]
  ragChats      RagChat[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Chat {
  id        String    @id @default(uuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chat")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      String   // "user" or "assistant"
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("message")
}

// RAG-specific models
model RagCollection {
  id            String     @id @default(uuid())
  name          String
  collectionName String   @unique // Qdrant collection name
  summary       String?
  type          String     // "pdf", "website", "text", "youtube"
  sourceUrl     String?    // Original URL for websites/youtube
  fileName      String?    // Original filename for uploads
  fileSize      Int?       // File size in bytes
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     RagDocument[]
  ragChats      RagChat[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("rag_collection")
}

model RagDocument {
  id            String        @id @default(uuid())
  content       String        // Document content
  metadata      Json?         // Additional metadata
  pageNumber    Int?          // For PDFs
  chunkIndex    Int?          // Chunk number within document
  collectionId  String
  collection    RagCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())

  @@map("rag_document")
}

model RagChat {
  id           String        @id @default(uuid())
  title        String
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionId String
  collection   RagCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  messages     RagMessage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("rag_chat")
}

model RagMessage {
  id        String   @id @default(uuid())
  content   String
  role      String   // "user" or "assistant"
  sources   Json?    // Retrieved source documents
  chatId    String
  chat      RagChat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("rag_message")
}
